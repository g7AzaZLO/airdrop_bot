from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

menu_kb = {
	'RU': ReplyKeyboardMarkup(
		keyboard=[
			[
				KeyboardButton(text="üòà–ü—Ä–æ—Ñ–∏–ª—å"),
				KeyboardButton(text="#Ô∏è‚É£–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
			],
			[
				KeyboardButton(text="üë•–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"),
				KeyboardButton(text="üí∞–ë–∞–ª–∞–Ω—Å"),
			],
			[
				KeyboardButton(text="ü•á–ó–∞–¥–∞—á–∏"),
				KeyboardButton(text="üîí–°–º–∞—Ä—Ç–∫–æ–Ω—Ç—Ä–∞–∫—Ç"),
			],
			[
				KeyboardButton(text="üîß–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
			],
		],
		resize_keyboard=True,
	),
	
	'ENG': ReplyKeyboardMarkup(
		keyboard=[
			[
				KeyboardButton(text="üòàProfile"),
				KeyboardButton(text="#Ô∏è‚É£Information"),
			],
			[
				KeyboardButton(text="üë•Invite Friends"),
				KeyboardButton(text="üí∞Balance"),
			],
			[
				KeyboardButton(text="ü•áTasks"),
				KeyboardButton(text="üîíSmartcontract"),
			],
			[
				KeyboardButton(text="üîßSettings"),
			],
		],
		resize_keyboard=True,
	)
}

kb_menu_settings = {
	'RU': ReplyKeyboardMarkup(
		keyboard=[
			[
				KeyboardButton(text="üåè–°–º–µ–Ω–∏—Ç—å –Ø–∑—ã–∫"),
				KeyboardButton(text="‚ùå–£–¥–∞–ª–∏—Ç—å –ê–∫–∫–∞—É–Ω—Ç"),
			],
			[
				KeyboardButton(text="üîÄ–°–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å"),
				KeyboardButton(text="‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥"),
			],
		],
		resize_keyboard=True,
	),
	
	'ENG': ReplyKeyboardMarkup(
		keyboard=[
			[
				KeyboardButton(text="üåèChange Language"),
				KeyboardButton(text="‚ùåDelete Account"),
			],
			[
				KeyboardButton(text="üîÄChange address"),
				KeyboardButton(text="‚è™Return back"),
			],
		],
		resize_keyboard=True,
	)
}


async def create_numeric_keyboard(total_buttons: int, exclusions: list, language: str) -> ReplyKeyboardMarkup:
	"""
	–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

	–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
	- total_buttons (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫.
	- exclusions (list): –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã.
	- language (str): –Ø–∑—ã–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫ ("RU" –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ, "EN" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ).

	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
	- ReplyKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
	"""
	# Ensure valid inputs
	if total_buttons < 1:
		raise ValueError("Total number of buttons must be at least 1")
	
	exclusions = [x + 1 for x in exclusions]
	
	if any(x > total_buttons or x < 1 for x in exclusions):
		raise ValueError("Exclusions contain invalid button numbers")
	
	if len(exclusions) > total_buttons:
		raise ValueError("Number of exclusions must be less than the total number of buttons")
	
	# Generate list of all button numbers and then remove the exclusions
	button_numbers = set(range(1, total_buttons + 1)) - set(exclusions)
	
	# Determine the button prefix based on language
	prefix = "–ó–∞–¥–∞–Ω–∏–µ #" if language == "RU" else "Task #"
	
	# Create buttons with language-specific labels
	keyboard_buttons = [KeyboardButton(text=f"{prefix}{num}") for num in sorted(button_numbers)]
	
	# Prepare special buttons
	return_back_text = "‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥" if language == "RU" else "‚è™Return Back"
	achievements_text = "üèÜ–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" if language == "RU" else "üèÜAchievements"
	special_buttons = [KeyboardButton(text=return_back_text), KeyboardButton(text=achievements_text)]
	
	# Organize buttons in rows of three and make sure to add special buttons in the last row
	keyboard_rows = [keyboard_buttons[i:i + 3] for i in range(0, len(keyboard_buttons), 3)]
	
	keyboard_rows.append(special_buttons)
	
	return ReplyKeyboardMarkup(keyboard=keyboard_rows, resize_keyboard=True)
	# Organize buttons in rows of three until the last row
	# keyboard = [keyboard_buttons[i:i + 3] for i in range(0, len(keyboard_buttons) - (len(keyboard_buttons) % 3), 3)]
	
	# # Add the last row of buttons (if any)
	# last_buttons_row = keyboard_buttons[len(keyboard_buttons) - (len(keyboard_buttons) % 3):]
	# if len(last_buttons_row) < 3:
	# 	# If there is space in the last row, add to it
	# 	last_buttons_row.extend(special_buttons[:3 - len(last_buttons_row)])
	# 	keyboard.append(last_buttons_row)
	# 	special_buttons = special_buttons[3 - len(last_buttons_row):]
	#
	# # Ensure special buttons are on a new row if no space is available
	# if special_buttons:
	# 	keyboard.append(special_buttons)
	#
	# return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)