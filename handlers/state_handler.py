import asyncio
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from messages.basic_messages import messages
from messages.menu_messages import menu_messages
from messages.task_menu_messages import task_menu_messages
from messages.other_messages import other_messages
from FSM.states import CaptchaState, RegistrationState, TasksState, state_messages, state_keyboards, \
    get_clean_state_identifier, state_menus, AdminMessageState
from keyboards.menu_kb import menu_kb, kb_menu_settings, create_numeric_keyboard
from keyboards.small_kb import join_kb, language_choose_kb, yes_no_kb, sub_cancel_kb, social_join_kb, kb_start, \
    kb_task_done_back, kb_tasks_back
from logic.refs import get_refferer_id, get_refferal_link
from logic.twitter import check_joined_twitter_channel, is_valid_twitter_link
from logic.address import is_valid_crypto_address
from logic.task import get_all_points, get_num_of_tasks, get_index_by_text_task, get_protection_from_task, \
    calculate_total_points, get_points_from_task, send_task_info, send_all_tasks_info, get_puzzle_from_task
from logic.captcha import generate_captcha, check_captcha
from logic.admins import ADMINS_IDS
from logic.telegram import check_joined_telegram_channel
from DB.database_logic import update_language_in_db, get_language_for_user, delete_user_from_db, get_user_details, \
    update_user_details, check_wallet_exists, decrement_referrer_count, mark_task_as_done, get_state_for_user, \
    set_user_state, remove_task_from_await, mark_task_as_await, delete_admin_message, insert_admin_messages, \
    get_admin_messages_dict, get_all_users
from DB.database_logic import check_is_user_already_here, add_user_to_db, add_referrer_to_user, get_referrer, \
    increment_referrer_count, add_points_to_user
from settings.config import AIRDROP_AMOUNT
from handlers.standart_handler import get_message
from settings.logging_config import get_logger

logger = get_logger()
state_handler_router = Router()


@state_handler_router.message(CaptchaState.wait_captcha_state)
async def captcha_response_handler(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–ø—á—É.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–ø—á—É.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞.
    - –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    logger.debug("Executing captcha_response_handler")
    user_response = message.text
    await state.update_data(user_captcha_response=user_response)
    result = await check_captcha(message)
    if result:
        user_id = message.from_user.id
        language = await get_language_for_user(message.from_user.id)
        current_state = await get_state_for_user(user_id)
        current_state_str = await get_clean_state_identifier(current_state)
        current_keyboard = state_keyboards[(current_state_str, language)]
        current_reply_messages = state_menus[current_state_str]
        current_reply = await get_message(current_reply_messages, state_messages[current_state_str], language)
        await state.set_state(current_state)
        await message.answer(text=current_reply, reply_markup=current_keyboard, parse_mode="MARKDOWN")
        logger.info(f"User {user_id} passed the captcha and state restored to {current_state_str}.")
    else:
        logger.warning(f"User {message.from_user.id} failed the captcha.")


@state_handler_router.message(RegistrationState.captcha_state)
async def captcha_response_handler_in_reg(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–ø—á—É –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–ø—á—É.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞.
    - –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    """
    logger.debug("Executing captcha_response_handler_in_reg")
    user_response = message.text
    await state.update_data(user_captcha_response=user_response)
    result = await check_captcha(message)
    if result:
        await state.set_state(RegistrationState.lang_choose_state)
        reply = await get_message(menu_messages, "LANGUAGE_CHOOSE", "ENG")
        await message.answer(text=reply, reply_markup=language_choose_kb)
        logger.info(f"User {message.from_user.id} passed the captcha and moved to lang_choose_state.")
    else:
        logger.warning(f"User {message.from_user.id} failed the captcha.")


@state_handler_router.message(RegistrationState.lang_choose_state)
async def lang_choose_response_handler_in_reg(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    - –ï—Å–ª–∏ —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    logger.debug("Executing lang_choose_response_handler_in_reg")
    user_response = message.text
    await state.update_data(user_lang_choose_response=user_response)
    user_id = message.from_user.id

    if user_response == "ENG English":
        language = "ENG"
    elif user_response == "RU –†—É—Å—Å–∫–∏–π":
        language = "RU"
    else:
        reply = await get_message(menu_messages, "LANGUAGE_CHOSEN_WRONG", "ENG")
        await message.answer(text=reply, reply_markup=language_choose_kb)
        logger.warning(f"User {user_id} selected an invalid language: {user_response}")
        return

    await state.set_state(RegistrationState.hello_state)
    await set_user_state(user_id, await get_clean_state_identifier(RegistrationState.hello_state))
    welcome_message = await get_message(messages, "WELCOME_MESSAGE", language, user_name=message.from_user.first_name)
    await message.answer(text=welcome_message, reply_markup=join_kb[language], parse_mode="MARKDOWN")
    await update_language_in_db(user_id, language)

    logger.info(f"User {user_id} selected language {language} and moved to hello_state.")


@state_handler_router.message(RegistrationState.hello_state)
async def hello_response_handler_in_reg(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–∏—Ä–¥—Ä–æ–ø—É, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞.
    - –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    logger.debug("Executing hello_response_handler_in_reg")
    user_response = message.text
    language = await get_language_for_user(message.from_user.id)
    await state.update_data(user_hello_response=user_response)

    if user_response in ["üöÄJoin Airdrop", "üöÄ–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–∏—Ä–¥—Ä–æ–ø—É"]:
        await state.set_state(RegistrationState.proceed_state)
        await set_user_state(message.from_user.id, await get_clean_state_identifier(RegistrationState.proceed_state))
        reply = await get_message(messages, "PROCEED_MESSAGE", language)
        await message.answer(text=reply, reply_markup=sub_cancel_kb[language], parse_mode="MARKDOWN")
        logger.info(f"User {message.from_user.id} agreed to join the airdrop and moved to proceed_state.")
    elif user_response in ["‚ùåCancel", "‚ùå–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]:
        await state.update_data(
            state_end1=CaptchaState.null_state,
            state_end2=RegistrationState.hello_state,
            text1=await get_message(messages, "START_AGAIN_TEXT", language),
            text2=await get_message(messages, "WELCOME_MESSAGE", language, user_name=message.from_user.first_name),
            kb1=kb_start,
            kb2=join_kb[language],
            delete=True
        )
        reply = await get_message(menu_messages, "YES_NO", language)
        await message.answer(text=reply, reply_markup=yes_no_kb[language])
        await state.set_state(RegistrationState.yes_no_state)
        logger.info(f"User {message.from_user.id} chose to cancel. Confirmation requested.")
    else:
        await message.answer(
            text=(await get_message(messages, "WELCOME_MESSAGE", language, user_name=message.from_user.first_name)),
            reply_markup=join_kb[language],
            parse_mode="MARKDOWN")
        logger.warning(f"User {message.from_user.id} provided an invalid response: {user_response}")
        return


@state_handler_router.message(RegistrationState.proceed_state)
async def proceed_response_handler_in_reg(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–≥–ª–∞—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ Telegram –∫–∞–Ω–∞–ª–æ–º.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞.
    - –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.
    """
    logger.debug("Executing proceed_response_handler_in_reg")
    user_response = message.text
    language = await get_language_for_user(message.from_user.id)
    await state.update_data(user_proceed_response=user_response)

    if user_response in ["‚úÖ–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏", "‚úÖSubmit Details"]:
        await state.set_state(RegistrationState.follow_telegram_state)
        await set_user_state(message.from_user.id,
                             await get_clean_state_identifier(RegistrationState.follow_telegram_state))
        reply = await get_message(messages, "MAKE_SURE_TELEGRAM", language)
        await message.answer(text=reply, reply_markup=social_join_kb[language])
        logger.info(f"User {message.from_user.id} agreed to the rules and moved to follow_telegram_state.")
    elif user_response in ["‚ùåCancel", "‚ùå–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]:
        await state.update_data(
            state_end1=CaptchaState.null_state,
            state_end2=RegistrationState.proceed_state,
            text1=await get_message(messages, "START_AGAIN_TEXT", language),
            text2=await get_message(messages, "PROCEED_MESSAGE", language),
            kb1=kb_start,
            kb2=sub_cancel_kb[language],
            delete=True
        )
        reply = await get_message(menu_messages, "YES_NO", language)
        await message.answer(text=reply, reply_markup=yes_no_kb[language])
        await state.set_state(RegistrationState.yes_no_state)
        logger.info(f"User {message.from_user.id} chose to cancel. Confirmation requested.")
    else:
        reply = await get_message(messages, "PROCEED_MESSAGE", language)
        await message.answer(text=reply, reply_markup=sub_cancel_kb[language], parse_mode="MARKDOWN")
        logger.warning(f"User {message.from_user.id} provided an invalid response: {user_response}")
        return


@state_handler_router.message(RegistrationState.follow_telegram_state)
async def follow_telegram_response_handler_in_reg(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏–ª –≤ –∫–∞–Ω–∞–ª.
    - –ï—Å–ª–∏ –¥–∞, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞.
    - –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª.
    - –í —Å–ª—É—á–∞–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π.
    """
    logger.debug("Executing follow_telegram_response_handler_in_reg")
    user_response = message.text
    language = await get_language_for_user(message.from_user.id)
    await state.update_data(user_follow_telegram_response=user_response)

    if user_response in ["‚úÖ–í—Å—Ç—É–ø–∏–ª", "‚úÖJoined"]:
        if await check_joined_telegram_channel(message.from_user.id):
            logger.info(f"User {message.from_user.id} is in all required Telegram channels.")
            await state.set_state(RegistrationState.submit_address_state)
            await set_user_state(message.from_user.id,
                                 await get_clean_state_identifier(RegistrationState.submit_address_state))
            reply = await get_message(messages, "SUBMIT_ADDRESS_TEXT", language)
            await message.answer(text=reply, reply_markup=types.ReplyKeyboardRemove(), parse_mode="MARKDOWN")
        else:
            logger.warning(f"User {message.from_user.id} is not in all required Telegram channels.")
            await state.set_state(RegistrationState.follow_telegram_state)
            reply = await get_message(messages, "NOT_SUB_AT_GROUP_TEXT", language)
            await message.answer(text=reply, reply_markup=social_join_kb[language])
    else:
        reply = await get_message(menu_messages, "UNKNOWN_COMMAND_TEXT", language)
        await message.answer(text=reply, reply_markup=social_join_kb[language])
        await state.set_state(RegistrationState.follow_telegram_state)
        logger.warning(f"User {message.from_user.id} provided an unknown command: {user_response}")


@state_handler_router.message(RegistrationState.submit_address_state)
async def submit_address_response_handler_in_reg(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å–æ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞.
    - –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–Ω—ã–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.
    - –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å.
    - –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å.
    """
    logger.debug("Executing submit_address_response_handler_in_reg")
    user_response = message.text
    language = await get_language_for_user(message.from_user.id)
    await state.update_data(user_submit_address_response=user_response)

    if await check_wallet_exists(user_response):
        if is_valid_crypto_address(user_response):
            logger.info(f"Valid crypto address provided by user {message.from_user.id}.")
            await update_user_details(message.from_user.id, ADDR=user_response, NUM_OF_REFS=0, REF_POINTS=0,
                                      POINTS=AIRDROP_AMOUNT)
            await state.set_state(RegistrationState.main_menu_state)
            await set_user_state(message.from_user.id,
                                 await get_clean_state_identifier(RegistrationState.main_menu_state))
            ref_link = await get_refferal_link(message.from_user.id)
            reply = await get_message(messages, "JOINED_TEXT", language, referral_link=ref_link)
            await message.answer(text=reply, reply_markup=menu_kb[language], parse_mode="MARKDOWN")
            refferer = await get_referrer(message.from_user.id)
            if refferer is not None:
                await increment_referrer_count(refferer)
        else:
            logger.warning(f"Invalid crypto address provided by user {message.from_user.id}.")
            await state.set_state(RegistrationState.submit_address_state)
            reply = await get_message(messages, "INVALID_ADDRESS_TEXT", language)
            await message.answer(text=reply)
    else:
        logger.warning(f"Crypto address already registered for user {message.from_user.id}.")
        await state.set_state(RegistrationState.submit_address_state)
        reply = await get_message(messages, "ADDRESS_ALREADY_REGISTERED_TEXT", language)
        await message.answer(text=reply)


@state_handler_router.message(RegistrationState.main_menu_state)
async def main_menu_handler(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é.
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –ø–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è, –±–∞–ª–∞–Ω—Å–∞, –∑–∞–¥–∞—á –∏ —Ç.–¥.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user_response = message.text
    user = await get_user_details(message.from_user.id)
    logger.debug(f"Handling main menu command, user response {user_response}, user {message.from_user.id}")
    language = await get_language_for_user(message.from_user.id)

    if user_response in ["üòà–ü—Ä–æ—Ñ–∏–ª—å", "üòàProfile"]:
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        num_of_refs = user.get("NUM_OF_REFS", 0)
        user_address = user.get("ADDR", "Not provided")
        user_twi = user.get("TWITTER_USER", "Not provided")
        reply = await get_message(menu_messages, "PROFILE_MENU", language, user_name=user_name,
                                  refferal_number=num_of_refs,
                                  address=user_address, user_twitter_link=user_twi, user_id=user_id)
        await message.answer(text=reply, reply_markup=menu_kb[language], parse_mode="MARKDOWN")
        return
    elif user_response in ["#Ô∏è‚É£–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "#Ô∏è‚É£Information"]:
        reply = await get_message(menu_messages, "INFORMATION_TEXT", language)
        await message.answer(text=reply, reply_markup=menu_kb[language], parse_mode="MARKDOWN")
        return
    elif user_response in ["üë•–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", "üë•Invite Friends"]:
        ref_link = await get_refferal_link(message.from_user.id)
        reply = await get_message(menu_messages, "INVITE_FRIENDS_TEXT", language, referral_link=ref_link)
        await message.answer(text=reply, reply_markup=menu_kb[language], parse_mode="MARKDOWN")
        return
    elif user_response in ["üí∞–ë–∞–ª–∞–Ω—Å", "üí∞Balance"]:
        balance = user.get("POINTS", 0)
        balance_by_refs = user.get("REF_POINTS", 0)
        reply = await get_message(menu_messages, "BALANCE_TEXT", language, balance=balance,
                                  user_referral_balance=balance_by_refs)
        await message.answer(text=reply, reply_markup=menu_kb[language], parse_mode="MARKDOWN")
    elif user_response in ["ü•á–ó–∞–¥–∞—á–∏", "ü•áTasks"]:
        tasks_done = user.get("TASKS_DONE", [])
        total_buttons = await get_num_of_tasks()
        task_done_points = await calculate_total_points(tasks_done)
        tasks_total_points = await get_all_points()
        tasks_await = user.get("TASKS_AWAIT", [])
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply = await get_message(task_menu_messages, "CHOOSE_NUMBER_TASK_TEXT", language,
                                  tasks_done_points=task_done_points,
                                  tasks_total_points=tasks_total_points)
        await message.answer(text=reply, reply_markup=tasks_keyboard)
        await state.set_state(TasksState.current_tasks_state)
    elif user_response in ["üîí–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞", "üîíTokenomics"]:
        reply = await get_message(menu_messages, "TOKENOMICS_TEXT", language)
        await message.answer_photo(caption=reply, photo=types.FSInputFile(path="settings/image/tokenomic.jpg"),
                                   reply_markup=menu_kb[language],
                                   parse_mode="HTML")
        return
    elif user_response in ["üîß–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üîßSettings"]:
        reply = await get_message(menu_messages, "MENU_SETTINGS", language)
        await message.answer(text=reply, reply_markup=kb_menu_settings[language])
        await state.set_state(RegistrationState.menu_settings)
    else:
        reply = await get_message(menu_messages, "UNKNOWN_COMMAND_TEXT", language)
        await message.answer(text=reply, reply_markup=menu_kb[language])
        return


@state_handler_router.message(RegistrationState.menu_settings)
async def menu_settings(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞, —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞, —Å–º–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞ –∏ —Ç.–¥.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user_response = message.text
    logger.debug("Handling menu settings")
    language = await get_language_for_user(message.from_user.id)

    if user_response in ["üåè–°–º–µ–Ω–∏—Ç—å –Ø–∑—ã–∫", "üåèChange Language"]:
        reply = await get_message(menu_messages, "LANGUAGE_CHOOSE", language)
        await message.answer(text=reply, reply_markup=language_choose_kb)
        await state.set_state(RegistrationState.lang_choose_state_again)
    elif user_response in ["‚ùå–£–¥–∞–ª–∏—Ç—å –ê–∫–∫–∞—É–Ω—Ç", "‚ùåDelete Account"]:
        await state.update_data(
            state_end1=CaptchaState.null_state,
            state_end2=RegistrationState.menu_settings,
            text1=await get_message(messages, "START_AGAIN_TEXT", language),
            text2=await get_message(menu_messages, "MENU_SETTINGS", language),
            kb1=kb_start,
            kb2=kb_menu_settings[language],
            delete=True
        )
        reply = await get_message(menu_messages, "YES_NO", language)
        await message.answer(text=reply, reply_markup=yes_no_kb[language])
        await state.set_state(RegistrationState.yes_no_state)
    elif user_response in ["‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥", "‚è™Return back"]:
        await state.set_state(RegistrationState.main_menu_state)
        reply = await get_message(menu_messages, "MENU", language)
        await message.answer(text=reply, reply_markup=menu_kb[language])
    elif user_response in ["üîÄ–°–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", "üîÄChange address"]:
        await state.set_state(RegistrationState.change_address_state)
        await state.update_data(
            state_end1=RegistrationState.change_address_state,
            state_end2=RegistrationState.menu_settings,
            text1=await get_message(menu_messages, "GET_ADDRESS_TEXT", language),
            text2=await get_message(menu_messages, "MENU_SETTINGS", language),
            kb1=kb_tasks_back[language],
            kb2=kb_menu_settings[language],
            delete=False
        )
        reply = await get_message(menu_messages, "CHANGE_ADDRESS_TEXT", language)
        await message.answer(text=reply, reply_markup=yes_no_kb[language])
        await state.set_state(RegistrationState.yes_no_state)
    else:
        reply = await get_message(menu_messages, "UNKNOWN_COMMAND_TEXT", language)
        await message.answer(text=reply, reply_markup=kb_menu_settings[language])
        return


@state_handler_router.message(RegistrationState.lang_choose_state_again)
async def lang_choose_response_handler(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    - –ï—Å–ª–∏ —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    logger.debug("Handling language choice response")
    user_response = message.text
    await state.update_data(user_lang_choose_response=user_response)
    user_id = message.from_user.id
    if user_response == "ENG English":
        language = "ENG"
    elif user_response == "RU –†—É—Å—Å–∫–∏–π":
        language = "RU"
    else:
        reply = await get_message(menu_messages, "LANGUAGE_CHOSEN_WRONG", "ENG")
        await message.answer(text=reply, reply_markup=language_choose_kb)
        return
    reply = await get_message(menu_messages, "MENU_SETTINGS", language)
    await message.answer(text=reply, reply_markup=kb_menu_settings[language])
    await state.set_state(RegistrationState.menu_settings)
    await update_language_in_db(user_id, language)


@state_handler_router.message(RegistrationState.yes_no_state)
async def yes_no_reply(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å "–î–∞/–ù–µ—Ç".

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å "–î–∞/–ù–µ—Ç".
    - –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ).
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    logger.debug("Handling yes/no reply")
    data = await state.get_data()
    state_end1 = data.get('state_end1')
    state_end2 = data.get('state_end2')
    text1 = data.get('text1')
    text2 = data.get('text2')
    kb1 = data.get('kb1')
    kb2 = data.get('kb2')
    delete = data.get('delete')
    user_response = message.text
    await state.update_data(user_hello_response=user_response)
    language = await get_language_for_user(message.from_user.id)
    if user_response in ["–î–∞", "Yes"]:
        if delete:
            refferer = await get_referrer(message.from_user.id)
            if refferer is not None:
                await decrement_referrer_count(refferer)
            await delete_user_from_db(message.from_user.id)
        await state.set_state(state_end1)
        if text1 is not None and kb1 is None:
            await message.answer(text=text1, reply_markup=types.ReplyKeyboardRemove(), parse_mode="MARKDOWN")
        elif text1 is not None and kb1 is not None:
            await message.answer(text=text1, reply_markup=kb1, parse_mode="MARKDOWN")
    elif user_response in ["–ù–µ—Ç", "No"]:
        await state.set_state(state_end2)
        if text2 is not None and kb2 is None:
            await message.answer(text=text2, reply_markup=types.ReplyKeyboardRemove(), parse_mode="MARKDOWN")
        elif text2 is not None and kb2 is not None:
            await message.answer(text=text2, reply_markup=kb2, parse_mode="MARKDOWN")
    else:
        reply = await get_message(menu_messages, "YES_NO", language)
        await message.answer(text=reply, reply_markup=yes_no_kb[language])


@state_handler_router.message(CaptchaState.null_state)
async def null_state(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω—É–ª–µ–≤–æ–π –∫–∞–ø—á–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ø—á—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ø—á—É.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    logger.debug("Handling null state")
    user_response = message.text
    language = await get_language_for_user(message.from_user.id)
    if language is None:
        language = "ENG"
    if user_response.lower() in ["start", "–Ω–∞—á–∞—Ç—å", r"\–Ω–∞—á–∞—Ç—å", r"\start"]:
        if await check_is_user_already_here(message.from_user.id):
            logger.debug(f"User {message.from_user.id} already in db")
            await generate_captcha(message)
            await state.set_state(CaptchaState.wait_captcha_state)
            capture_message = await get_message(messages, "CAPTCHA_MESSAGE", language)
            await message.answer(text=capture_message, reply_markup=types.ReplyKeyboardRemove())
        else:
            logger.debug(f"User {message.from_user.id} not in db")
            await add_user_to_db(message.from_user.id)
            referrer = await get_refferer_id(message.text)
            if referrer is not None:
                await add_referrer_to_user(message.from_user.id, referrer)
            await generate_captcha(message)
            await state.set_state(RegistrationState.captcha_state)
            capture_message = await get_message(messages, "CAPTCHA_MESSAGE", language)
            await message.answer(text=capture_message, reply_markup=types.ReplyKeyboardRemove())
    else:
        reply = await get_message(messages, "START_AGAIN_TEXT", language)
        await message.answer(text=reply, reply_markup=kb_start)
        return


@state_handler_router.message(TasksState.current_tasks_state)
async def current_tasks_handler(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    - –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    - –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–æ–≤–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    logger.debug(f"def current_tasks_handler, task #{message.text}")
    language = await get_language_for_user(message.from_user.id)
    user_response = message.text
    index_task = await get_index_by_text_task(user_response, language)
    logger.debug(f"index task == {index_task}")
    user = await get_user_details(message.from_user.id)
    tasks_done = user.get("TASKS_DONE", [])
    tasks_await = user.get("TASKS_AWAIT", [])
    if index_task is not None and index_task in tasks_done:
        reply1 = await get_message(task_menu_messages, "TASK_DONE_ALREADY", language)
        total_buttons = await get_num_of_tasks()
        task_done_points = await calculate_total_points(tasks_done)
        tasks_total_points = await get_all_points()
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply2 = await get_message(task_menu_messages, "CHOOSE_NUMBER_TASK_TEXT", language,
                                   tasks_done_points=task_done_points,
                                   tasks_total_points=tasks_total_points)
        await message.answer(text=reply1 + reply2, reply_markup=tasks_keyboard)
        await state.set_state(TasksState.current_tasks_state)
        return
    elif index_task in tasks_await:
        reply1 = await get_message(other_messages, "TASK_ALREADY_SEND_TEXT", language)
        total_buttons = await get_num_of_tasks()
        task_done_points = await calculate_total_points(tasks_done)
        tasks_total_points = await get_all_points()
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply2 = await get_message(task_menu_messages, "CHOOSE_NUMBER_TASK_TEXT", language,
                                   tasks_done_points=task_done_points,
                                   tasks_total_points=tasks_total_points)
        await message.answer(text=reply1 + reply2, reply_markup=tasks_keyboard)
        await state.set_state(TasksState.current_tasks_state)
        return
    elif index_task is not None and index_task in range(await get_num_of_tasks()):
        reply = await get_message(task_menu_messages, "TASK_DONE_BACK_TEXT", language)
        await message.answer(text=reply, reply_markup=kb_task_done_back[language])
        await state.update_data(num_of_task=user_response)
        await send_task_info(message, index_task)
        await state.set_state(TasksState.single_task_state)
    elif user_response in ["‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥", "‚è™Return Back"]:
        await state.set_state(RegistrationState.main_menu_state)
        reply = await get_message(menu_messages, "MENU", language)
        await message.answer(text=reply, reply_markup=menu_kb[language], parse_mode="MARKDOWN")
    elif user_response in ["üèÜ–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üèÜAchievements"]:
        await state.set_state(TasksState.achievements_state)
        user = await get_user_details(message.from_user.id)
        tasks_done = user.get("TASKS_DONE", [])
        points_done = await calculate_total_points(tasks_done)
        reply = await get_message(task_menu_messages, "ACHIEVEMENTS", language, tasks_done=len(tasks_done),
                                  points_done=points_done)
        await message.answer(text=reply, reply_markup=kb_tasks_back[language], parse_mode="MARKDOWN")
    elif user_response in ["üìã–í—Å–µ –ó–∞–¥–∞–Ω–∏—è", "üìãAll Tasks"]:
        await send_all_tasks_info(message, tasks_done)
        tasks_done = user.get("TASKS_DONE", [])
        total_buttons = await get_num_of_tasks()
        task_done_points = await calculate_total_points(tasks_done)
        tasks_total_points = await get_all_points()
        tasks_await = user.get("TASKS_AWAIT", [])
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply = await get_message(task_menu_messages, "CHOOSE_NUMBER_TASK_TEXT", language,
                                  tasks_done_points=task_done_points,
                                  tasks_total_points=tasks_total_points)
        await message.answer(text=reply, reply_markup=tasks_keyboard)
        return
    else:
        reply = await get_message(menu_messages, "UNKNOWN_COMMAND_TEXT", language)
        user = await get_user_details(message.from_user.id)
        tasks_done = user.get("TASKS_DONE", [])
        total_buttons = await get_num_of_tasks()
        tasks_await = user.get("TASKS_AWAIT", [])
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        await message.answer(text=reply, reply_markup=tasks_keyboard)
        return


@state_handler_router.message(TasksState.single_task_state)
async def single_task_handler(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞–¥–∞—á–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞–¥–∞—á–∏.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—â–∏—Ç—É –∑–∞–¥–∞—á–∏ (—Å–∫—Ä–∏–Ω—à–æ—Ç, Twitter, –ø–∞–∑–ª –∏ —Ç.–¥.).
    - –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.
    - –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞—â–∏—Ç–∞, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    logger.debug(f"def single_task_handler")
    language = await get_language_for_user(message.from_user.id)
    user = await get_user_details(message.from_user.id)
    user_response = message.text
    task_text = await state.get_data()
    index_task = await get_index_by_text_task(task_text["num_of_task"], language)
    if user_response in ["‚úÖ–í—ã–ø–æ–ª–Ω–∏–ª", "‚úÖDone"]:
        protection = await get_protection_from_task(index_task)
        if not await get_protection_from_task(index_task):
            points = await get_points_from_task(index_task)
            await add_points_to_user(message.from_user.id, points)
            task_marked = await mark_task_as_done(message.from_user.id, index_task)
            tasks_done = user.get("TASKS_DONE", [])
            if task_marked:
                tasks_done.append(index_task)
            task_done_points = await calculate_total_points(tasks_done)
            total_buttons = await get_num_of_tasks()
            tasks_await = user.get("TASKS_AWAIT", [])
            tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
            tasks_total_points = await get_all_points()
            reply = await get_message(task_menu_messages, "CHOOSE_NUMBER_TASK_TEXT", language,
                                      tasks_done_points=task_done_points, tasks_total_points=tasks_total_points)
            await message.answer(text=reply, reply_markup=tasks_keyboard)
            await state.set_state(TasksState.current_tasks_state)
        else:
            if protection == "screen_check":
                reply = await get_message(other_messages, "SEND_PIC_TO_CHECK_TEXT", language)
                await message.answer(text=reply)
                await state.set_state(TasksState.screen_check_state)
            elif protection == "twitter_screen_check":
                reply = await get_message(task_menu_messages, "TYPE_TWITTER_TEXT", language)
                await message.answer(text=reply, parse_mode="MARKDOWN")
                await state.set_state(TasksState.follow_twitter_state)
            elif protection == "puzzle":
                reply = await get_message(other_messages, "PUZZLE_CHECK", language)
                await message.answer(text=reply, reply_markup=kb_tasks_back[language])
                await state.set_state(TasksState.puzzle_check_state)
            else:
                logger.warning(f"THIS PROTECTION IS NOT IMPLEMENTED YET")
                reply = await get_message(other_messages, "PROTECTION_NOT_IMPLEMENTED", language)
                await message.answer(text=reply)
                await state.set_state(TasksState.screen_check_state)
                tasks_done = user.get("TASKS_DONE", [])
                total_buttons = await get_num_of_tasks()
                tasks_await = user.get("TASKS_AWAIT", [])
                tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
                reply = await get_message(task_menu_messages, "WE_ARE_BACK_CHOOSE_TEXT", language)
                await message.answer(text=reply, reply_markup=tasks_keyboard)
                await state.set_state(TasksState.current_tasks_state)
    elif user_response in ["‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥", "‚è™Return Back"]:
        tasks_done = user.get("TASKS_DONE", [])
        total_buttons = await get_num_of_tasks()
        tasks_await = user.get("TASKS_AWAIT", [])
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply = await get_message(task_menu_messages, "WE_ARE_BACK_CHOOSE_TEXT", language)
        await message.answer(text=reply, reply_markup=tasks_keyboard)
        await state.set_state(TasksState.current_tasks_state)
    else:
        reply = await get_message(menu_messages, "UNKNOWN_COMMAND_TEXT", language)
        await message.answer(text=reply, reply_markup=kb_task_done_back[language])
        return


@state_handler_router.message(TasksState.follow_twitter_state)
async def follow_twitter_response_handler_in_reg(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ Twitter –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Twitter.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ Twitter.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –º–µ–Ω—é –∑–∞–¥–∞—á.
    - –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ Twitter –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∑–∞–¥–∞—á.
    """
    logger.debug("def follow_twitter_response_handler")
    user_response = message.text
    language = await get_language_for_user(message.from_user.id)
    await state.update_data(user_follow_twitter_response=user_response)
    if is_valid_twitter_link(user_response):
        if await check_joined_twitter_channel(user_response):
            logger.info("User has joined the Twitter channel")
            await update_user_details(message.from_user.id, TWITTER_USER=user_response)
            reply = await get_message(other_messages, "SEND_TWITTER_CHECK", language, parse_mode="MARKDOWN")
            await message.answer(text=reply)
            await state.set_state(TasksState.screen_check_state)
        else:
            logger.info("User is already in the database")
            user = await get_user_details(message.from_user.id)
            reply1 = await get_message(messages, "TWITTER_ALREADY_REGISTERED_TEXT", language)
            tasks_done = user.get("TASKS_DONE", [])
            total_buttons = await get_num_of_tasks()
            tasks_await = user.get("TASKS_AWAIT", [])
            tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
            reply2 = await get_message(task_menu_messages, "WE_ARE_BACK_CHOOSE_TEXT", language)
            await message.answer(text=reply1 + '\n' + reply2, reply_markup=tasks_keyboard)
            await state.set_state(TasksState.current_tasks_state)
    else:
        logger.warning("Invalid Twitter Link")
        reply1 = await get_message(messages, "TWITTER_INVALID_LINK_TEXT", language)
        user = await get_user_details(message.from_user.id)
        tasks_done = user.get("TASKS_DONE", [])
        total_buttons = await get_num_of_tasks()
        tasks_await = user.get("TASKS_AWAIT", [])
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply2 = await get_message(task_menu_messages, "WE_ARE_BACK_CHOOSE_TEXT", language)
        await message.answer(text=reply1 + '\n' + reply2, reply_markup=tasks_keyboard)
        await state.set_state(TasksState.current_tasks_state)


@state_handler_router.message(TasksState.achievements_state)
async def achievements_handler(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥".
    - –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–±—Ä–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á.
    - –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É.
    """
    logger.debug("def achievements_handler")
    language = await get_language_for_user(message.from_user.id)
    user_response = message.text
    user = await get_user_details(message.from_user.id)
    if user_response in ["‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥", "‚è™Return Back"]:
        tasks_done = user.get("TASKS_DONE", [])
        total_buttons = await get_num_of_tasks()
        tasks_await = user.get("TASKS_AWAIT", [])
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply = await get_message(task_menu_messages, "WE_ARE_BACK_CHOOSE_TEXT", language)
        await message.answer(text=reply, reply_markup=tasks_keyboard)
        await state.set_state(TasksState.current_tasks_state)
    else:
        reply = await get_message(menu_messages, "UNKNOWN_COMMAND_TEXT", language)
        await message.answer(text=reply, reply_markup=kb_task_done_back[language])
        return


@state_handler_router.message(TasksState.screen_check_state)
async def handle_screen_check(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤.
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ –æ–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ü–∏—é "–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥".
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.
    """
    user_id = message.from_user.id
    user = await get_user_details(user_id)
    language = await get_language_for_user(message.from_user.id)
    task_text = await state.get_data()
    index_task = await get_index_by_text_task(task_text["num_of_task"], language)
    points = await get_points_from_task(index_task)
    if message.photo:
        screenshot = message.photo[-1]
        await mark_task_as_await(message.from_user.id, index_task)
    elif message.text in ["‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥", "‚è™Return Back"]:
        tasks_done = user.get("TASKS_DONE", [])
        total_buttons = await get_num_of_tasks()
        tasks_await = user.get("TASKS_AWAIT", [])
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply = await get_message(task_menu_messages, "WE_ARE_BACK_CHOOSE_TEXT", language)
        await message.answer(text=reply, reply_markup=tasks_keyboard)
        await state.set_state(TasksState.current_tasks_state)
        return
    else:
        reply = await get_message(other_messages, "SEND_PIC_TO_CHECK_TEXT", language)
        await message.answer(text=reply)
        await state.set_state(TasksState.screen_check_state)
        return
    if screenshot:
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞",
                                  callback_data=f"approve_{user_id}_{index_task}_{points}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç",
                                  callback_data=f"reject_{user_id}_{index_task}")]
        ])
        admin_messages = {}
        for admin_id in ADMINS_IDS:
            if not admin_id:
                logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_id}")
                continue
            try:
                admin_id_int = int(admin_id)
                sent_message = await message.bot.send_photo(
                    chat_id=admin_id_int,
                    photo=screenshot.file_id,
                    caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {index_task}."
                            f" –ù–∞—á–∏—Å–ª–∏—Ç—å {points} –æ—á–∫–æ–≤?"
                )
                await message.bot.edit_message_reply_markup(chat_id=admin_id_int, message_id=sent_message.message_id,
                                                            reply_markup=inline_kb)
                admin_messages[admin_id_int] = sent_message.message_id
            except ValueError:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å ID {admin_id}: {e}")
        await insert_admin_messages({index_task: admin_messages}, user_id)
        tasks_done = user.get("TASKS_DONE", [])
        total_buttons = await get_num_of_tasks()
        tasks_await = user.get("TASKS_AWAIT", [])
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply = await get_message(task_menu_messages, "WE_ARE_BACK_CHOOSE_TEXT", language)
        await message.answer(text=reply, reply_markup=tasks_keyboard)
        reply2 = await get_message(other_messages, "YOUR_PIC_SEND_TEXT", language)
        await message.answer(text=reply2, reply_markup=tasks_keyboard)
        await state.set_state(TasksState.current_tasks_state)
        asyncio.create_task(auto_reject_task(user_id, index_task, admin_messages, message, 36000))
    else:
        reply = await get_message(other_messages, "PLS_SEND_PIC_TEXT", language)
        await message.answer(text=reply)


async def auto_reject_task(user_id: int, index_task: int, admin_messages: dict, message, delay: int) -> None:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - index_task (int): –ò–Ω–¥–µ–∫—Å –∑–∞–¥–∞–Ω–∏—è.
    - admin_messages (dict): –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.
    - message: –°–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞–Ω–∏—è.
    - delay (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ñ–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (delay).
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö.
    - –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö.
    - –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
    """
    await asyncio.sleep(delay)
    user = await get_user_details(user_id)
    tasks_await = user.get("TASKS_AWAIT", [])
    if index_task in tasks_await:
        await remove_task_from_await(user_id, index_task)
        if index_task in admin_messages:
            await delete_admin_message(index_task, user_id)
        user_language = await get_language_for_user(user_id)
        reply = await get_message(other_messages, "TRY_AGAIN_TEXT", user_language)
        await message.answer(text=reply)
        logger.info(f"Task {index_task} rejected for user {user_id} due to timeout")


@state_handler_router.callback_query(lambda callback_query: callback_query.data.startswith("approve_"))
async def approve_task(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query (types.CallbackQuery): –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ callback –∑–∞–ø—Ä–æ—Å–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ callback –∑–∞–ø—Ä–æ—Å–∞.
    - –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    - –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö, –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –∏ –æ—Ç–º–µ—á–∞–µ—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.
    - –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    admin_user_id = callback_query.from_user.id
    language = await get_language_for_user(admin_user_id)
    if callback_query.from_user.id not in ADMINS_IDS:
        reply = await get_message(other_messages, "NO_PERMISSION_TEXT", language)
        await callback_query.answer(text=reply)
        return
    data = callback_query.data.split("_")
    user_id = int(data[1])
    index_task = int(data[2])
    points = int(data[3])
    admin_messages_dict = await get_admin_messages_dict(user_id)
    admin_messages = admin_messages_dict.get(index_task, {})
    user = await get_user_details(user_id)
    tasks_await = user.get("TASKS_AWAIT", [])
    if index_task in tasks_await:
        await remove_task_from_await(user_id, index_task)
        for admin_id, message_id in admin_messages.items():
            try:
                await callback_query.message.bot.delete_message(chat_id=admin_id, message_id=message_id)
            except Exception as e:
                logger.error(f"Failed to delete message {message_id} for admin {admin_id}: {e}")
        if index_task in admin_messages_dict:
            await delete_admin_message(index_task, user_id)
        task_done = user.get("TASKS_DONE", [])
        if index_task not in task_done:
            await add_points_to_user(user_id, points)
            await mark_task_as_done(user_id, index_task)
        user_language = user.get("LANGUAGE", "")
        reply = await get_message(other_messages, "TASK_DONE_TEXT", user_language, index_task=index_task + 1)
        await callback_query.message.bot.send_message(chat_id=user_id, text=reply)
        reply2 = await get_message(other_messages, "TASK_CONFIRMED_TEXT", user_language)
        await callback_query.answer(text=reply2)
    else:
        logger.info("Tasks not in task_await, delete")
        for admin_id, message_id in admin_messages.items():
            try:
                await callback_query.message.bot.delete_message(chat_id=admin_id, message_id=message_id)
            except Exception as e:
                logger.error(
                    f"Failed to delete message {message_id} for admin {admin_id}: {e} (task not in task_await)")
        if index_task in admin_messages_dict:
            await delete_admin_message(index_task, user_id)


@state_handler_router.callback_query(lambda callback_query: callback_query.data.startswith("reject_"))
async def reject_task(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query (types.CallbackQuery): –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.
    - –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π.
    - –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.
    - –ù–∞—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.
    """
    admin_user_id = callback_query.from_user.id
    language = await get_language_for_user(admin_user_id)
    if callback_query.from_user.id not in ADMINS_IDS:
        reply = await get_message(other_messages, "NO_PERMISSION_TEXT", language)
        await callback_query.answer(text=reply)
        return
    data = callback_query.data.split("_")
    user_id = int(data[1])
    index_task = int(data[2])
    admin_messages_dict = await get_admin_messages_dict(user_id)
    admin_messages = admin_messages_dict.get(index_task, {})
    user = await get_user_details(user_id)
    tasks_await = user.get("TASKS_AWAIT", [])
    protection = await get_protection_from_task(index_task)
    if protection == "twitter_screen_check":
        await update_user_details(user_id, TWITTER_USER=None)
    if index_task in tasks_await:
        await remove_task_from_await(user_id, index_task)
        for admin_id, message_id in admin_messages.items():
            try:
                await callback_query.message.bot.delete_message(chat_id=admin_id, message_id=message_id)
            except Exception as e:
                logger.error(f"Failed to delete message {message_id} for admin {admin_id}: {e}")
        if index_task in admin_messages_dict:
            await delete_admin_message(index_task, user_id)
        user_language = await get_language_for_user(user_id)
        reply = await get_message(other_messages, "TRY_AGAIN_TEXT", user_language)
        await callback_query.message.bot.send_message(chat_id=user_id, text=reply)
        reply2 = await get_message(other_messages, "TASK_REJECTED_TEXT", user_language)
        await callback_query.answer(text=reply2)
    else:
        logger.info("Tasks not in task_await, delete")
        for admin_id, message_id in admin_messages.items():
            try:
                await callback_query.message.bot.delete_message(chat_id=admin_id, message_id=message_id)
            except Exception as e:
                logger.error(
                    f"Failed to delete message {message_id} for admin {admin_id}: {e} (task not in task_await)")
        if index_task in admin_messages_dict:
            await delete_admin_message(index_task, user_id)


@state_handler_router.message(AdminMessageState.waiting_for_message)
async def handle_admin_message(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞–Ω–∏–º–∞—Ü–∏—è).
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    user_id = message.from_user.id
    language = await get_language_for_user(user_id)
    if message.from_user.id not in ADMINS_IDS:
        reply = await get_message(other_messages, "NO_PERMISSION_TEXT", language)
        await message.answer(text=reply)
        return
    content_type = message.content_type
    user_message = message.text if content_type == types.ContentType.TEXT else (message.caption or "")
    if content_type == types.ContentType.TEXT:
        reply = await get_message(other_messages, "SEND_MESSAGE_TEXT", language, message=user_message)
        await message.answer(text=reply)
    elif content_type == types.ContentType.PHOTO:
        reply = await get_message(other_messages, "SEND_PHOTO_TEXT", language)
        await message.answer(text=reply)
    elif content_type == types.ContentType.VIDEO:
        reply = await get_message(other_messages, "SEND_VIDEO_TEXT", language)
        await message.answer(text=reply)
    elif content_type == types.ContentType.ANIMATION:
        reply = await get_message(other_messages, "SEND_GIF_TEXT", language)
        await message.answer(text=reply)
    all_users = await get_all_users()
    for user in all_users:
        try:
            if content_type == types.ContentType.TEXT:
                await message.bot.send_message(chat_id=user["USER_ID"], text=user_message, parse_mode="Markdown")
            elif content_type == types.ContentType.PHOTO:
                photo = message.photo[-1].file_id
                await message.bot.send_photo(chat_id=user["USER_ID"], photo=photo, caption=user_message,
                                             parse_mode="Markdown")
            elif content_type == types.ContentType.VIDEO:
                video = message.video.file_id
                await message.bot.send_video(chat_id=user["USER_ID"], video=video, caption=user_message,
                                             parse_mode="Markdown")
            elif content_type == types.ContentType.ANIMATION:
                animation = message.animation.file_id
                await message.bot.send_animation(chat_id=user["USER_ID"], animation=animation, caption=user_message,
                                                 parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user['USER_ID']}: {e}")
    await state.set_state(RegistrationState.main_menu_state)
    reply = await get_message(other_messages, "MESSAGE_SENT_TEXT", language)
    await message.answer(text=reply)


@state_handler_router.message(RegistrationState.change_address_state)
async def change_address(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    language = await get_language_for_user(user_id)
    user_response = message.text
    if user_response in ["‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥", "‚è™Return Back"]:
        reply = await get_message(menu_messages, "MENU_SETTINGS", language)
        await message.answer(text=reply, reply_markup=kb_menu_settings[language])
        await state.set_state(RegistrationState.menu_settings)
        return
    if await check_wallet_exists(user_response):
        if is_valid_crypto_address(user_response):
            logger.info("Valid crypto address")
            await update_user_details(message.from_user.id, ADDR=user_response)
            reply = await get_message(menu_messages, "SUCCESS_CHANGE_ADRESS", language)
            await message.answer(text=reply, reply_markup=kb_menu_settings[language])
            await state.set_state(RegistrationState.menu_settings)
        else:
            logger.warning("Invalid crypto address")
            await state.set_state(RegistrationState.change_address_state)
            reply = await get_message(messages, "INVALID_ADDRESS_TEXT", language)
            await message.answer(text=reply, reply_markup=kb_tasks_back[language])
            return
    else:
        await state.set_state(RegistrationState.change_address_state)
        reply = await get_message(messages, "ADDRESS_ALREADY_REGISTERED_TEXT", language)
        await message.answer(text=reply, reply_markup=kb_tasks_back[language])
        return


@state_handler_router.message(TasksState.puzzle_check_state)
async def puzzle_check(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ-–≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É.
    - –ù–∞—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ —Ä–µ—à–µ–Ω–∞ –≤–µ—Ä–Ω–æ.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    user = await get_user_details(message.from_user.id)
    language = await get_language_for_user(message.from_user.id)
    if message.text in ["‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥", "‚è™Return Back"]:
        tasks_done = user.get("TASKS_DONE", [])
        total_buttons = await get_num_of_tasks()
        tasks_await = user.get("TASKS_AWAIT", [])
        tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
        reply = await get_message(task_menu_messages, "WE_ARE_BACK_CHOOSE_TEXT", language)
        await message.answer(text=reply, reply_markup=tasks_keyboard)
        await state.set_state(TasksState.current_tasks_state)
        return
    else:
        task_text = await state.get_data()
        index_task = await get_index_by_text_task(task_text["num_of_task"], language)
        points = await get_points_from_task(index_task)
        user_response = message.text
        puzzle = await get_puzzle_from_task(index_task)
        if user_response in puzzle:
            logger.info("Puzzle solved")
            await add_points_to_user(message.from_user.id, points)
            task_marked = await mark_task_as_done(message.from_user.id, index_task)
            tasks_done = user.get("TASKS_DONE", [])
            if task_marked:
                tasks_done.append(index_task)
            task_done_points = await calculate_total_points(tasks_done)
            total_buttons = await get_num_of_tasks()
            tasks_await = user.get("TASKS_AWAIT", [])
            tasks_keyboard = await create_numeric_keyboard(total_buttons, tasks_done + tasks_await, language)
            tasks_total_points = await get_all_points()
            reply1 = await get_message(other_messages, "CORRECT_ANSWER", language)
            await message.answer(text=reply1)
            reply2 = await get_message(task_menu_messages, "CHOOSE_NUMBER_TASK_TEXT", language,
                                       tasks_done_points=task_done_points, tasks_total_points=tasks_total_points)
            await message.answer(text=reply2, reply_markup=tasks_keyboard)
            await state.set_state(TasksState.current_tasks_state)
        else:
            reply = await get_message(other_messages, "PUZZLE_REJECTED", language)
            await message.answer(text=reply, reply_markup=kb_tasks_back[language])
            await state.set_state(TasksState.puzzle_check_state)
